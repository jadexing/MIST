import requests
import json
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook

# Function to read the API key from the 'MyKey.txt' text file
def get_api_key(filename):
    try:
        with open(filename, 'r') as file:
            return file.read().strip()
    except FileNotFoundError:
        print(f"Error: The file '{filename}' was not found.")
        exit()

# Function to get the client count for a selected site
def get_client_count(site_id, api_key):
    url = f"https://api.mist.com/api/v1/sites/{site_id}/clients/count?distinct=hostname"
    headers = {
        "Authorization": f"Token {api_key}"
    }
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        return response.json()  # Parse the JSON response
    else:
        print(f"Error fetching client count for site {site_id}: {response.status_code}")
        return None

# Read Org ID from the 'Org.txt' file
try:
    with open('Org.txt', 'r') as file:
        org_id = file.read().strip()
except FileNotFoundError:
    print(f"Error: The file 'Org.txt' was not found.")
    exit()

# Define the API URL for the specific organization sites
url = f"https://api.mist.com/api/v1/orgs/{org_id}/sites"

# Set the headers with the API key from the 'MyKey.txt' file
api_key = get_api_key('MyKey.txt')
headers = {
    "Authorization": f"Token {api_key}"
}

# Send the GET request to the Mist API
response = requests.get(url, headers=headers)

# Check if the request was successful
if response.status_code == 200:
    print("Successfully retrieved site data.")
    
    # Parse the response data
    response_data = response.json()

    # Create a list to hold site data
    site_data = []

    if isinstance(response_data, list):
        for site in response_data:
            site_info = {
                "site_name": site.get('name', ''),
                "site_id": site.get('id', ''),
                "site_type": site.get('type', ''),
                "created_at": site.get('created_at', ''),
                "updated_at": site.get('updated_at', '')
            }
            site_data.append(site_info)

    # Sort the site data by site_name
    site_data_sorted = sorted(site_data, key=lambda x: x['site_name'])

    # Display the site_name and site_id in alphabetical order with index number
    print("\nSites (Sorted by name):")
    for index, site in enumerate(site_data_sorted, start=1):
        print(f"{index}. Site Name: {site['site_name']}, Site ID: {site['site_id']}")

    # Ask the user to choose a site
    site_choice = input("\nFor all sites, please hit <Enter>. For one site, please enter the index number of the site: ")

    # Prompt the user for the start and end date for the data collection
    start_date_input = input("Enter the start date for data collection (YYYY-MM-DD): ")
    end_date_input = input("Enter the end date for data collection (YYYY-MM-DD): ")

    try:
        start_date = datetime.strptime(start_date_input, "%Y-%m-%d")
        end_date = datetime.strptime(end_date_input, "%Y-%m-%d")
    except ValueError:
        print("Invalid date format. Please use YYYY-MM-DD.")
        exit()

    # Initialize the grand total
    grand_total = 0  # Initialize the grand total

    # Initialize a list to hold the data for the DataFrame
    site_data_for_df = []

    # Get the current time as the start time
    start_time = datetime.now()

    if site_choice.strip() == "":
        print("\nCounting clients for all sites...")
        for site in site_data_sorted:
            client_count = get_client_count(site['site_id'], api_key)
            if client_count is not None:
                total = client_count.get('total', 0)  # Extract the 'total' field
                grand_total += total
                site_data_for_df.append({
                    "site_name": site['site_name'],
                    "site_id": site['site_id'],
                    "client_count": total,
                    "data_range": f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"
                })
                print(f"Site: {site['site_name']} - Client Count: {total}")
    else:
        try:
            site_choice = int(site_choice)
            if 1 <= site_choice <= len(site_data_sorted):
                site = site_data_sorted[site_choice - 1]
                client_count = get_client_count(site['site_id'], api_key)
                if client_count is not None:
                    total = client_count.get('total', 0)
                    grand_total += total
                    site_data_for_df.append({
                        "site_name": site['site_name'],
                        "site_id": site['site_id'],
                        "client_count": total,
                        "data_range": f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"
                    })
                    print(f"\nSite: {site['site_name']} - Client Count: {total}")
            else:
                print("Invalid index number.")
        except ValueError:
            print("Invalid input. Please enter a valid index number.")

    # Get the current time as the end time
    end_time = datetime.now()

    # Add the time range to each row of data
    for row in site_data_for_df:
        row["data_range"] = f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"

    # Display the grand total count
    print(f"\nTotal count with all sites: {grand_total}")

    # Convert the site data to a DataFrame
    df = pd.DataFrame(site_data_for_df)

    # Create a DataFrame for the grand total row
    grand_total_df = pd.DataFrame([{
        "site_name": "Grand Total",
        "site_id": "",
        "client_count": grand_total,
        "data_range": f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"
    }])

    # Concatenate the original DataFrame with the grand total DataFrame
    df = pd.concat([df, grand_total_df], ignore_index=True)

    # Get current date and time for filename and sheet name
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = "MistUniqueClientCount.xlsx"
    sheet_name = f"Data_{current_time}"

    # Check if the file exists
    try:
        # Try loading the existing workbook
        wb = load_workbook(filename)
        
        # Write data to a new sheet in the existing file
        with pd.ExcelWriter(filename, engine='openpyxl', mode='a') as writer:
            df.to_excel(writer, sheet_name=sheet_name, index=False)

        print(f"\nSite data and grand total have been saved to the sheet '{sheet_name}' in the file {filename}")
    except FileNotFoundError:
        # If the file doesn't exist, create it and save the data to the first sheet
        df.to_excel(filename, index=False, sheet_name=sheet_name)
        print(f"\nSite data and grand total have been saved to {filename}")

else:
    print(f"Error: {response.status_code} - {response.text}")
